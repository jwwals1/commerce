
{% extends "auctions/layout.html" %}


{% block body %}
<div>
    <form action="index" method="get" enctype="multipart/form-data">
    </form>
    <h2>Active Listings</h2>
    {% for item in listings %}
    <a href="{% url 'listingpage' auction_id=aution_id %}">
    <br>
    {{ item }},
    {{item.brief_description}}
   Price: ${{item.price}}</br></a>
    {% endfor %}
</div>


{% endblock %}


{% block body %}
<div>
    <form action="index" method="get" enctype="multipart/form-data">
    </form>
    <h2>Active Listings</h2>
    <ul>
    {% for auction in auctions %}
    <li>>
    <a href="{% url 'listingpage' auction.id %}">
    {{auction.id}}
    {{ auction}},
    {{auction.brief_description}}
   Price: ${{auction.price}}</br></a>
   </li>
    {% endfor %}
    </ul>
</div>


{% endblock %}

{% endif %}
{% if comment.comment %}
<p>{{comment.user_comment}}: {{comment.comment_text}} <br> {{comment.comment_time}}</p>
{% endif %}



<h3>Make Bid</h3>
{% for bid in bids %}
{{bid.bidder_name}}: {{bid.bid_price}}
{% empty %}
No bids
{% endfor %}


{% block body %}
<div>
    </form>
    <h2>Active Listings</h2>
    {% for item in listings %}
    <a href="{% url 'activelistings' %}">
    <br>
    {{ item }},
    {{item.brief_description}}
   Price: ${{item.price}}</br></a>
    {% endfor %}

</div>
{% endblock %}


def active_listings(request):
    auctions = AuctionListing.objects.all()
    return render(request, 'activelistings.html', {
        "auctions": auctions,
    })



    {% block body %}
    <div>
        </form>
        <h1>Active Listings</h1>
        <a href="{% url 'index' %}">Homepage</a><br>
        {% for auction in auctions %}
        <a href="{% url 'listingpage' auction.id %}">
        <br>
        {{ auction }},
        {{item.brief_description}}
       Price: ${{auction.price}}</br></a>
       {% if auction.product_image %}
            <img src="{{auction.product_image.url}}" width="400", height="200" alt="Picture"></p>
           {%endif%}
    
        {% endfor %}
    
    </div>
    {% endblock %}

    @login_required(login_url="login")
def bid(request):
    if request.method == "POST":
        form = BidForm(request.POST)
        if form.is_valid():
            bid_price = float(form.cleaned_data["bid_price"])
            auction_id = request.POST.get("auction_id")
            auction = AuctionListing.objects.get(pk=auction_id)
            bidder_name = User.objects.get(id=request.user.id)
            new_bid = Bid(auction=auction,
                          bidder_name=bidder_name, bid_price=bid_price)
            new_bid.save()
            auction.save()

            return HttpResponseRedirect('/' + auction_id)

        else:
            return render(request, 'auctions/createlisting.html')
    return HttpResponseRedirect('/' + auction_id)

    {% block body %}
{% for auction_selling in auction_sellings %}
{{ auction_selling }}
{% endfor %}

@login_required(login_url="login")
def user_account(request):
    auction_sellings = AuctionListing.objects.filter(
        seller_name=request.user.id).all()
    all_bids = Bid.objects.filter(bidder_name=request.user.id).all()

    return render(request, 'auctions/useraccount.html', {
        "auction_sellings": auction_sellings,
        "all_bids": all_bids,
    })

    {% extends 'auctions/layout.html' %}

 

    {% extends 'auctions/layout.html' %}

 

    {% block body %}
    <h1>Hello {{ user.username }}</h1>
    
    {% for auction_selling in auction_sellings %}<br>
    {{ auction_selling.product_name }}: {{ auction_selling.brief_description }} ${{auction_selling.price}}<br></a>
    {% endfor %}
    
    <br><br>
    {% for all_bid in all_bids %}
    {{ all_bid }} <br>
    {% endfor %}
    
    {% endblock %}

    {% extends 'auctions/layout.html' %}

 

{% block body %}
<h1>Hello {{ user.username }}</h1>

{% for auction_selling in auction_sellings %}<br>
{{ auction_selling.product_name }}: {{ auction_selling.brief_description }} ${{auction_selling.price}}. Created at {{auction_selling.created_at}}<br></a>
{% endfor %}

<br><br>
{% for all_bid in all_bids %}
{{ all_bid }} on Auction Information: <br>{{ all_bid.auction }}<br><br>
{% endfor %}

{% endblock %}

@api_view(['GET', 'POST'])
def auction_listings_api(request):
    if request.method == 'GET':
        queryset = AuctionListing.objects.all()
        serializer = AuctionListingSerializer(queryset, many=True)
        return Response(serializer.data)
    elif request.method == 'POST':
        serializer = AuctionListingSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        serializer.validated_data
        return Response(serializer.data, status=status.HTTP_201_CREATED)

        class AuctionListings(APIView):
        def get(self, request):
            queryset = AuctionListing.objects.all()
            serializer = AuctionListingSerializer(queryset, many=True)
            return Response(serializer.data)
    
        def post(self, request):
            serializer = AuctionListing(data=request.data)
            serializer.is_valid(raise_exection=True)
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)      
            
            
            @api_view(['GET', 'POST'])
            def auction_listings_api(request):
                if request.method == 'GET':
                    queryset = AuctionListing.objects.all()
                    serializer = AuctionListingSerializer(queryset, many=True)
                    return Response(serializer.data)
                elif request.method == 'POST':
                    serializer = AuctionListingSerializer(data=request.data)
                    serializer.is_valid(raise_exception=True)
                    serializer.save()
                    return Response(serializer.data, status=status.HTTP_201_CREATED)
            
            
            @api_view(['GET', 'PUT'])
            def auction_listing_api(request, id):
                auction_listing = get_object_or_404(AuctionListing, pk=id)
                if request.method == 'GET':
                    serializer = AuctionListingSerializer(auction_listing)
                    return Response(serializer.data)
                elif request.method == 'PUT':
                    serializer = AuctionListingSerializer(
                        auction_listing, data=request.data)
                    serializer.is_valid(raise_exception=True)
                    serializer.save()
                    return Response(serializer.data)
            